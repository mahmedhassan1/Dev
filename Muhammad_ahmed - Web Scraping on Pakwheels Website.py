# -*- coding: utf-8 -*-
"""CA 1 - 20035027_Muhammad Ahmed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wS-A-bbDYH2ZLLoZzRgPepZktcGZrNf5
"""

!pip install bs4
!pip install beautifulsoup4
!pip install mysql-connector-python
!pip install chromedriver-autoinstaller
!pip install openpyxl
!pip install fake-useragent
!pip install pymongo[tls] certifi
!pip install pymongo[srv] certifi pandas

#import streamlit as st
import pandas as pd
import numpy as np
import matplotlib as plt
from bs4 import BeautifulSoup
import requests
import csv
import mysql.connector
import chromedriver_autoinstaller
import matplotlib as plt
import pymongo
import certifi

# URL of the website to scrape
url = 'https://www.pakwheels.com/used-cars/search/-/featured_1/?page=222'
# Send a GET request
response = requests.get(url)
if response.status_code == 200:
    soup = BeautifulSoup(response.content, 'html.parser')

    # Example: Extract data
    data = []
    for item in soup.find_all('div', class_='data-item'):
        title = item.find('h2').text.strip()
        price = item.find('span', class_='price').text.strip()
        data.append({'Title': title, 'Price': price})

# Convert to a DataFrame
    df = pd.DataFrame(data)
else:
    print(f"Failed to retrieve the page. Status code: {response.status_code}")

response=requests.get(url)
print(response)

for key,value in response.headers.items():
    print(key,value)

print(response.status_code)

#to pretend website is being used by human to avoid security issues n getting blocked by the website
from fake_useragent import UserAgent
obj = UserAgent()
header={'user-agent':obj.chrome}
r = requests.get('https://www.pakwheels.com/used-cars/search/-/featured_1/', headers=header)
display(r.content)

response = requests.get('https://www.pakwheels.com/used-cars/search/-/featured_1/')
## creating BeautifulSoup object
soup = BeautifulSoup(response.content, "html.parser")
soup.prettify()
## using 'prettify' method to print the content
#pages 1 to 222
#print(soup.prettify())

class1='well search-list clearfix ad-container page-'
span=soup.find_all('div',class_=class1)
# for tag in span:
#     print(tag)
#     print('\n')

user_agent = UserAgent()
column_names=['vehicle_name','city','date_added','model','mileage','fuel','engine_capacity','auto_manual','price']

vehicle_name=[]
city=[]
date_added=[]
model=[]
mileage=[]
fuel=[]
engine_capacity=[]
auto_manual=[]
price=[]

for page in range(1,100):
    display(page)
    if page!=1:
        url='https://www.pakwheels.com/used-cars/search/-/?page={}'.format(page)
    else:
        url='https://www.pakwheels.com/used-cars/search/-/'
    page = requests.get(url, headers={"user-agent": user_agent.chrome})
    html=page.content
    soup = BeautifulSoup(html, "html.parser")
    car1='car-name ad-detail-path'
    a_tags=soup.find_all('a',class_=car1)
    for tag in a_tags:
        vehicle_name.append(tag['title'])
    city1='list-unstyled search-vehicle-info fs13'
    cities=soup.find_all('ul',class_=city1)
    for tag in cities:
        city.append(tag.li.text.strip('\n').strip(' ').strip('\n'))
    date1="pull-left dated"
    time_added=soup.find_all('div',class_=date1)
    for tag in time_added:
        date_added.append(tag.text)
    class3='list-unstyled search-vehicle-info-2 fs13'
    info=soup.find_all('ul',class_=class3)
    for tag in info:
        i=0
        for j in tag:
            if j!='\n':
                i+=1
                if i==1:
                    model.append(j.text)
                elif i==2:
                    mileage.append(j.text)
                elif i==3:
                    fuel.append(j.text)
                elif i==4:
                    engine_capacity.append(j.text)
                elif i==5:
                    auto_manual.append(j.text)
    cost='price-details generic-dark-grey'
    price1=soup.find_all('div',class_=cost)
    for tag in price1:
        price.append(tag.text.strip('\n').strip(' ').strip('\n'))

data=[]
for i in range(len(vehicle_name)):
    data.append([])
    data[-1].append(vehicle_name[i])
    data[-1].append(city[i])
    data[-1].append(date_added[i])
    data[-1].append(model[i])
    data[-1].append(mileage[i])
    data[-1].append(fuel[i])
    data[-1].append(engine_capacity[i])
    data[-1].append(auto_manual[i])
    data[-1].append(price[i])
print(data)

with open('pakwheel.csv','w', encoding='UTF8',newline='') as csv_file:
    writer=csv.writer(csv_file)
    #write header
    writer.writerow(column_names)
    #write multiple rows
    writer.writerows(data)

#append into an existing csv file
import csv
with open('pakwheel.csv','a',newline='') as file:
    writer=csv.writer(file)
    writer.writerows(data)

df=pd.read_csv('/content/pakwheel.csv')
df.head()

from datetime import datetime, timedelta

# Load the dataset
data = pd.read_csv('/content/pakwheel.csv')

# Step 1: Convert `date_added` to actual dates
today = datetime.now()

# Extract numeric values from 'date_added', handling non-numeric values
data['days_ago'] = data['date_added'].str.extract(r'(\d+)')
data['days_ago'] = pd.to_numeric(data['days_ago'], errors='coerce').fillna(0).astype(int)

data['date_added'] = data['days_ago'].apply(lambda x: (today - timedelta(days=x)).date())

# Convert `date_added` to datetime format
data['date_added'] = pd.to_datetime(data['date_added'], errors='coerce')

# Convert `date_added` to the desired format
data['date_added'] = data['date_added'].dt.strftime('%d/%m/%y')



# Step 2: Clean and convert `mileage`, `engine_capacity`, and `price`
if data['mileage'].dtype == 'object':
    data['mileage'] = data['mileage'].str.replace(',', '').str.replace(' km', '')
    data['mileage'] = pd.to_numeric(data['mileage'], errors='coerce')  # Convert to numeric, handling errors

if data['engine_capacity'].dtype == 'object':
    data['engine_capacity'] = data['engine_capacity'].str.replace(' cc', '')
    data['engine_capacity'] = pd.to_numeric(data['engine_capacity'], errors='coerce')  # Convert to numeric, handling errors

if data['price'].dtype == 'object':
    data['price'] = data['price'].astype(str).str.replace('PKR ', '',).str.replace(',', '').str.lower()

    # Function to convert price to millions
    def convert_price_to_millions(price):
        if 'lacs' in price:
            price = price.replace(' lacs', '')
            price_lacs = float(price)
            return price_lacs / 10  # Convert lacs to millions
        elif 'crore' in price:
            price = price.replace(' crore', '')
            price_crore = float(price)
            price_lacs = price_crore * 100  # Convert crore to lacs
            return price_lacs / 10  # Convert lacs to millions
        else:
            return None  # Handle cases with missing or invalid price format

    data['price'] = data['price'].apply(convert_price_to_millions)
data.rename(columns={'price': 'price (millions)'}, inplace=True)
# Save to Excel
# Feature Engineering: Creating new features
# 1. Car Age (days since the car was added)
data['car_age'] = (today - pd.to_datetime(data['date_added'], format='%d/%m/%y')).dt.days

# 2. Price per Kilometer (price in millions divided by mileage)
data['price_per_km'] = data['price (millions)'] / data['mileage']

# 3. Engine Capacity per Kilometer (engine capacity divided by mileage)
data['engine_capacity_per_km'] = data['engine_capacity'] / data['mileage']

# 4. Price per Engine Capacity (price in millions divided by engine capacity)
data['price_per_cc'] = data['price (millions)'] / data['engine_capacity']

# 5. Mileage per Car Age (mileage divided by car age in days)
data['mileage_per_age'] = data['mileage'] / data['car_age']

# Handling potential issues with new columns (e.g., division by zero or missing values)
# Instead of using inplace=True, directly assign the value to the columns
data['price_per_km'] = data['price_per_km'].replace([float('inf'), -float('inf')], 0)
data['engine_capacity_per_km'] = data['engine_capacity_per_km'].replace([float('inf'), -float('inf')], 0)
data['price_per_cc'] = data['price_per_cc'].replace([float('inf'), -float('inf')], 0)
data['mileage_per_age'] = data['mileage_per_age'].replace([float('inf'), -float('inf')], 0)

# Round the new columns to 2 decimal places
data['mileage_per_age'] = data['mileage_per_age'].round(2)

# Step 3: Save the cleaned and enriched data to a CSV file
data.to_csv('cleaned_vehicle_data.csv', index=False)

df=pd.read_csv('/content/cleaned_vehicle_data.csv')
df.head()

!curl ifconfig.me

# # Delete all records from the collection
# try:
#     result = collection.delete_many({})
#     print(f"Deleted {result.deleted_count} records from the collection.")
# except Exception as e:
#     print(f"Error deleting records: {e}")

# Connection string with updated and encoded password
uri = "mongodb+srv://Muhammad:Goodboys%40by12@cluster0.uamtz.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"

# Specify CA certificate file for SSL/TLS
ca = certifi.where()

# Create a new client and connect to the server
client = pymongo.MongoClient(uri, server_api=pymongo.server_api.ServerApi('1'), tlsCAFile=ca)

# Test the connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(f"Connection failed: {e}")

# Load the DataFrame (replace with the actual file path to your data)
data_path = '/content/cleaned_vehicle_data.csv'  # Update with your file path
try:
    data = pd.read_csv(data_path)
    print("Data loaded successfully!")
except Exception as e:
    print(f"Error loading CSV file: {e}")
    raise

# Convert the DataFrame to a list of dictionaries
data_dict = data.to_dict("records")

# Access the database and collection
db = client['pakwheelsdatascraped']  # Database name
collection = db['vehicles']  # Collection name

# Insert the data into the collection
try:
    result = collection.insert_many(data_dict)
    print(f"Data successfully written to MongoDB! Inserted {len(result.inserted_ids)} records.")
except Exception as e:
    print(f"Error inserting data: {e}")

# Query and retrieve records
try:
    # Fetch all records from the collection
    records = collection.find()

    # Convert the records into a DataFrame for easier viewing
    df = pd.DataFrame(list(records))

    # Display the first few records
    print("Records retrieved successfully!")
    display(df.head())  # Use display() in Colab to show the DataFrame
except Exception as e:
    print(f"Error retrieving records: {e}")

# Retrieve records where price > 1,000,000
query = {"price": {"$gt": 1000000}}

try:
    # Fetch filtered records
    filtered_records = collection.find(query)

    # Convert to DataFrame and display
    filtered_df = pd.DataFrame(list(filtered_records))
    print("Filtered records retrieved successfully!")
    display(filtered_df.head())
except Exception as e:
    print(f"Error retrieving filtered records: {e}")

# Paginate and fetch records
try:
    records = collection.find().limit(100)  # Limit to 100 records
    df = pd.DataFrame(list(records))
    print("First 100 records retrieved successfully!")
    display(df)
except Exception as e:
    print(f"Error retrieving records: {e}")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset (Assuming 'data' is already loaded and cleaned)
data = pd.read_csv('/content/cleaned_vehicle_data.csv') # Load your cleaned data if needed

# Set the style for seaborn plots
sns.set(style="whitegrid")

# 1. Histograms for Numeric Columns
plt.figure(figsize=(10, 6))
data[['mileage', 'engine_capacity', 'price (millions)']].hist(bins=20, figsize=(12, 8), layout=(2, 2))
plt.suptitle('Histogram of Mileage, Engine Capacity, and Price')
plt.show()

# 2. Scatter Plot: Mileage vs Price
plt.figure(figsize=(8, 6))
sns.scatterplot(x='mileage', y='price (millions)', data=data, color='blue')
plt.title('Scatter Plot: Mileage vs Price')
plt.xlabel('Mileage (in km)')
plt.ylabel('Price (in PKR)')
plt.show()

# 3. Box Plot for Price distribution
plt.figure(figsize=(8, 6))
sns.boxplot(x='fuel', y='price (millions)', data=data)
plt.title('Box Plot of Price by Fuel Type')
plt.xlabel('Fuel Type')
plt.ylabel('Price (in PKR)')
plt.show()

# 4. Correlation Heatmap
plt.figure(figsize=(8, 6))

# Convert columns to numeric, forcing errors to NaN
data['mileage'] = pd.to_numeric(data['mileage'], errors='coerce')
data['engine_capacity'] = pd.to_numeric(data['engine_capacity'], errors='coerce')
data['price'] = pd.to_numeric(data['price (millions)'], errors='coerce')

# Drop rows with NaN values in any of the relevant columns
data = data.dropna(subset=['mileage', 'engine_capacity', 'price'])

# Now calculate the correlation matrix
corr_matrix = data[['mileage', 'engine_capacity', 'price']].corr()
# corr_matrix = data[['mileage', 'engine_capacity', 'price']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap for Numeric Columns')
plt.show()

# 5. Pairplot for Multiple Variables
sns.pairplot(data[['mileage', 'engine_capacity', 'price']])
plt.suptitle('Pairplot: Mileage, Engine Capacity, and Price', y=1.02)
plt.show()